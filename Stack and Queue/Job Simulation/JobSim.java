// Taehyeon Lee
// CS 143
// Core Topic: Stack and Queue
// This program runs a simulation and fire and hire based on the number that is generated by dice.

import java.util.*;

// field
public class JobSim {
   private Stack<String> employList;
   private Queue<String> waitingList;

   // constructor, this initialize employlist stack and waitinglist queue, then put all workers
   // into waitinglist and take employees from waitiling list as many as jobs and put them in employlist
   public JobSim(int workers, int jobs) {
      employList = new Stack<String>();
      waitingList = new LinkedList<String>();

      for (int i = 1; i <= workers; i++){
         waitingList.add("Worker #" + i);
      }


      for(int i = 0; i < jobs; i++){
         String employee = waitingList.remove();
         employList.push(employee);
      }


   }

   // this method prints how many workers are employed and how many are in the waitinglist
   public String toString() {
      String employee = "Employed: " + employList;
      String waiting = "Waitlist: " + waitingList;
      return employee + "\n" + waiting;
   }

   // this method roll a die and runs a cycle that fire number of employees as many as die represent and hire
   // that many from the waitinglist
   public void cycle() {
      Random rand = new Random();
      int fire = rand.nextInt(6) + 1;

      for (int i = 0; i < fire; i++) {
         String fired = employList.pop();
         waitingList.add(fired);

      }
      for (int i = 0; i < fire; i ++){
         String employed = waitingList.remove();
         employList.push(employed);
      }

   }
}